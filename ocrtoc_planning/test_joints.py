import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from math import pi
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list


moveit_commander.roscpp_initialize(sys.argv)
rospy.init_node('move_group_python_interface_tutorial',
                anonymous=True)


robot = moveit_commander.RobotCommander()


group_name = "panda_arm"
group = moveit_commander.MoveGroupCommander(group_name)
# joint_goal = group.get_current_joint_values()

# goals = [[-3.116146132736875107e-01,1.271379235138466735e-01,-1.014782742818196359e+00,-2.252111875768293636e+00,7.222283828868817368e-01,1.470456451141171961e+00,1.269803011110488988e+00],
# [0.7397677690009893, -0.40991237396575136, -1.8426906050385936, -1.4849550875810091, 0.09734388667994451, 1.3172595470372621, 1.8906494271409],
# [2.0017872838948416, 0.033325338064777686, -0.5524197959610099, -1.8161321096631335, -0.560160280857247, 1.5035119616257897, -0.2566584508134139],
# [1.5959455949907062, -0.1708124804194857, -0.06526264785525258, -2.436452602980464, -0.558477478634352, 1.4654714239250695, 0.25828720216876633]]

goals = [-0.012656969018280506, -0.8346583843231201, 0.005065533798187971, -2.4151875972747803, 0.02087291330099106, 1.7091606855392456, 0.7950625419616699]

#  -0.012656969018280506, -0.8346583843231201, 0.005065533798187971, -2.4151875972747803, 0.02087291330099106, 1.7091606855392456, 0.7950625419616699

# -3.116146132736875107e-01,1.271379235138466735e-01,-1.014782742818196359e+00,-2.252111875768293636e+00,7.222283828868817368e-01,1.470456451141171961e+00,1.269803011110488988e+00
# 0.7397677690009893, -0.40991237396575136, -1.8426906050385936, -1.4849550875810091, 0.09734388667994451, 1.3172595470372621, 1.8906494271409
# 1.4764659606782145, -0.013882403454559983, -0.12656590258360503, -1.448408149696782, -0.6905019809040394, 1.0595824073349596, -0.3554653044584522
# 1.5892913792972823, -0.1781361181596219, -0.08279737416846394, -2.4325120843483097, -0.47785359221275664, 1.4891203298995699, 0.24800334510222297

# [1.4764659606782145, -0.013882403454559983, -0.12656590258360503, -1.448408149696782, -0.6905019809040394, 1.0595824073349596, -0.3554653044584522],
# [1.5892913792972823, -0.1781361181596219, -0.08279737416846394, -2.4325120843483097, -0.47785359221275664, 1.4891203298995699, 0.24800334510222297]
# ]

# 3 - 1.5959455949907062, -0.1708124804194857, -0.06526264785525258, -2.436452602980464, -0.558477478634352, 1.4654714239250695, 0.25828720216876633
# 2 - 2.0017872838948416, 0.033325338064777686, -0.5524197959610099, -1.8161321096631335, -0.560160280857247, 1.5035119616257897, -0.2566584508134139 

# joint_goal = goals[3]#[1.4846501090712605, -0.11402598215578674, -0.11590828172016035, -1.718105396545149, -0.5829896512025545, 1.4197451689909437, -0.0700714720279583]
# # joint_goal[0] = 0
# # joint_goal[1] = -pi/4
# # joint_goal[2] = 0
# # joint_goal[3] = -pi/2
# # joint_goal[4] = 0
# # joint_goal[5] = pi/3
# # joint_goal[6] = 0

# # The go command can be called with joint values, poses, or without any
# # parameters if you have already set the pose or joint target for the group
group.go(goals, wait=True)


# for joint_goal in goals:
    
#     group.go(joint_goal, wait=True)